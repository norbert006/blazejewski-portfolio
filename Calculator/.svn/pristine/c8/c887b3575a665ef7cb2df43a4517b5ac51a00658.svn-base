package uk.ac.rhul.cs2800;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class TestStandardCalc {
  StandardCalc sc;

  @BeforeEach
  void setup() {
    sc = new StandardCalc();
  }

  @Test // 1
  void testEvaluate2() throws InvalidExpressionException {
    assertEquals(sc.evaluate("2"), 2,
        "Test that evalute returns the same value that was given in the expression but parsed as a float");
    // To pass the test the evaluate method returns the same value that was given in the expression.
  }

  @Test // 2
  void testThrowException() {
    assertThrows(InvalidExpressionException.class, () -> sc.evaluate("  "),
        "Expression cannot be blank.");
    assertThrows(InvalidExpressionException.class, () -> sc.evaluate(""),
        "Expression cannot be blank.");
    // To pass this test, the exception must be called when the user provides a blank expression.
  }
}
